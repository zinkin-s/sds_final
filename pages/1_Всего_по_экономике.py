import pandas as pd
import streamlit as st
import altair as alt
import numpy as np

def load_dataset(path):
    df = pd.read_csv(path)
    return df

def merge_datasets(df1, df2):
    df = pd.concat([df1, df2], ignore_index=True)
    return df

def calculate_cpi(df):
    x = df['–¢–µ–º–ø—ã –∏–Ω—Ñ–ª—è—Ü–∏–∏']
    return x + 100

def calc_nominal_wage_index(df):
    nominal_wage = list(df['–í—Å–µ–≥–æ –ø–æ  —ç–∫–æ–Ω–æ–º–∏–∫–µ'])
    arr = []
    arr.append(2223 / 1523 * 100)

    for i in range(1, len(nominal_wage)):
        arr.append(nominal_wage[i]/nominal_wage[i-1]*100)
    
    return np.array(arr)

def calculate_cip_rate(df):
    cip = list(df['–ò–ü–¶'])
    cip_rate = []
    t = 1
    for i in range(len(cip)):
        t = t*cip[i]/100
        cip_rate.append(t)
    
    return np.array(cip_rate) * 100

def calculate_real_wage_rate(df):
    arr = []
    ys = list(df['–ò–†–ó–ü % –∫ –ø—Ä–µ–¥. –≥–æ–¥—É'])
    t = 1
    for j in range(len(ys)):
        t = t * (ys[j]/100)
        arr.append(t)
    return np.array(arr) * 100




st.set_page_config(page_title="–í—Å–µ–≥–æ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ", page_icon="üìà")
st.sidebar.header('–í—Å–µ–≥–æ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ')
st.title('–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–∞–±–æ—Ç–Ω—ã—Ö –ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏')

path_1 = 'data//sheet_1.csv'
sheet_1 = load_dataset(path_1)

path_2 = 'data//sheet_2.csv'
sheet_2 = load_dataset(path_2)
sheet_2 = sheet_2.rename(columns={'–í—Å–µ–≥–æ': '–í—Å–µ–≥–æ –ø–æ  —ç–∫–æ–Ω–æ–º–∏–∫–µ'})

data = merge_datasets(sheet_1[['–ì–æ–¥', '–í—Å–µ–≥–æ –ø–æ  —ç–∫–æ–Ω–æ–º–∏–∫–µ']], sheet_2[['–ì–æ–¥', '–í—Å–µ–≥–æ –ø–æ  —ç–∫–æ–Ω–æ–º–∏–∫–µ']])
idx = data['–ì–æ–¥']

infl_path = 'data//inflation.csv'
inflation = pd.read_csv(infl_path)

data = data.rename(columns={'–ì–æ–¥':'–≥–æ–¥'})
data = data.set_index(idx).sort_index()
inflation = inflation.set_index('–ì–æ–¥').sort_index()

data['–¢–µ–º–ø—ã –∏–Ω—Ñ–ª—è—Ü–∏–∏'] = inflation['–í—Å–µ–≥–æ']
data['–ò–ü–¶'] = calculate_cpi(data)
data['–ò–ù–ó–ü % –∫ –ø—Ä–µ–¥.–≥–æ–¥—É'] = calc_nominal_wage_index(data)
data['–ò–†–ó–ü % –∫ –ø—Ä–µ–¥. –≥–æ–¥—É'] = data['–ò–ù–ó–ü % –∫ –ø—Ä–µ–¥.–≥–æ–¥—É'] / data['–ò–ü–¶'] * 100
data['–ò–ü–¶ % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É'] = calculate_cip_rate(data)
data['–†–ó–ü % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É'] = data['–í—Å–µ–≥–æ –ø–æ  —ç–∫–æ–Ω–æ–º–∏–∫–µ'] / (data['–ò–ü–¶ % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É'] / 100)
data['–ò–†–ó–ü % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É'] = calculate_real_wage_rate(data)

#data = data['–≥–æ–¥'].astype('datetime64[Y]')

st.markdown('### –ò–ù–ó–ü –∏ –ò–†–ó–ü –≤ % –∫ –ø—Ä–µ–¥.–≥–æ–¥—É')
#st.line_chart(data,x='–≥–æ–¥', y=['–ò–†–ó–ü % –∫ –ø—Ä–µ–¥. –≥–æ–¥—É', '–ò–ù–ó–ü % –∫ –ø—Ä–µ–¥.–≥–æ–¥—É'])

#st.line_chart(data, y=['–ò–ü–¶ % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É','–ò–†–ó–ü % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É'])


base = alt.Chart(data).encode(
    alt.X('–≥–æ–¥', 
    axis = alt.Axis(title=None))
)
real_wage = base.mark_line(
    point=alt.OverlayMarkDef(filled=False, fill="white"),
    color='##57A44C'
).encode(
    alt.Y('–†–ó–ü % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É',
    axis=alt.Axis(title='–†–ó–ü, —Ä—É–±', titleColor='#57A44C'))
)

nominal_wage = base.mark_line(
    point=alt.OverlayMarkDef(filled=False, fill="white", color='red'),
    color='red'
).encode(
    alt.Y('–í—Å–µ–≥–æ –ø–æ  —ç–∫–æ–Ω–æ–º–∏–∫–µ',
    axis=alt.Axis(title='–ù–ó–ü –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ, —Ä—É–±.', titleColor='red'))
)



rwi = base.mark_line(
    point=alt.OverlayMarkDef(filled=False, fill="white"),
).encode(
    alt.Y('–ò–†–ó–ü % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É',
    axis=alt.Axis(title='% –∫ –±–∞–∑–æ–≤–æ–º—É (1999) –≥–æ–¥—É', titleColor='#57A44C'))
)

cpi = base.mark_line(
    point=alt.OverlayMarkDef(filled=False, fill="white", color='red'),
    color='red'
).encode(
    alt.Y('–ò–ü–¶ % –∫ –±–∞–∑–æ–≤–æ–º—É –≥–æ–¥—É',
    axis=alt.Axis(title='% –∫ –±–∞–∑–æ–≤–æ–º—É (1999) –≥–æ–¥—É', titleColor='##5276A7'))
)


tab1, tab2 = st.tabs(['–†–µ–∞–ª—å–Ω–∞—è –∏ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ 2000-2023 –≥–≥.', '–ò–†–ó–ü –∏ –ò–ü–¶ –∑–∞ –ø–µ—Ä–∏–æ–¥ 2000-2023 –≥–≥. % –∫ 1999 –≥–æ–¥—É'])

with tab1:
    chart = alt.layer(real_wage, nominal_wage).resolve_scale(
        y='independent',
    )
    st.altair_chart(chart, theme='streamlit', use_container_width=True)
with tab2:
    chart_2 = alt.layer(rwi, cpi)
    st.altair_chart(chart_2, theme='streamlit', use_container_width=True)

st.dataframe(data)
